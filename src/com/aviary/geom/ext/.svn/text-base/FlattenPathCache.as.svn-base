///////////////////////////////////////////////////////////
//  FlattenPathCache.as
//  Macromedia ActionScript Implementation of the Class FlattenPathCache
//  Generated by Enterprise Architect
//  Created on:      01-Apr-2008 8:09:22 AM
//  Original author: alessandro crugnola
///////////////////////////////////////////////////////////

package com.aviary.geom.ext
{
	import com.aviary.geom.path.IPath;
	import com.aviary.raven.utils.ObjectId;
	
	import flash.utils.Dictionary;
	
	import it.sephiroth.gettext._;
	
	public final class FlattenPathCache
	{
		private static var $instance: FlattenPathCache = null;
		private static var singleton_check: SingletonCheck;
		
		private var _cache: Dictionary;
		
		public static function get instance(): FlattenPathCache
		{
			if( !$instance )
			{
				$instance = new FlattenPathCache( new SingletonCheck() );
			}
			
			return $instance;
		}
		
		// --
		
		
		public function FlattenPathCache( singleton_check: SingletonCheck = null )
		{
			if( !singleton_check )
			{
				throw new Error( _("The class FlattenPathCache cannot be inited. Use FlattenPathCache.instance instead!") );
			}
			
			_cache = new Dictionary( true );
		}
		
		public function isCached( path: IPath, flatness: Number = 0.01 ): Boolean
		{
			var id: ObjectId = path.pathId;
			
			if( !_cache[ id ] )
			{
				return false;
			}
			
			if( !_cache[ id ][ flatness ] )
			{
				return false;
			}
			
			return true;
		}
		
		public function getFlattenPath( path: IPath, flatness: Number = 0.01 ): FlattenPath
		{
			if( !isCached( path, flatness ) )
			{
				var f_path: FlattenPath = new FlattenPath( path, flatness );
				storeItem( path, flatness, f_path );
			}
			
			return getItem( path, flatness );
		}
		
		protected function storeItem( path: IPath, flatness: Number, item: FlattenPath ): void
		{
			var id: ObjectId = path.pathId;
			
			if( !_cache[ id ] )
			{
				_cache[ id ] = new Dictionary( true );
			}
			
			_cache[ id ][ flatness ] = item;
			
			var size: uint = 0;
			
			for( var k: String in _cache )
			{
				size++;
			}
		}
		
		protected function getItem( path: IPath, flatness: Number ): FlattenPath
		{
			if( !isCached( path, flatness ) )
			{
				return null;
			}
			
			return _cache[ path.pathId ][ flatness ];
		}
	}
}

class SingletonCheck { }