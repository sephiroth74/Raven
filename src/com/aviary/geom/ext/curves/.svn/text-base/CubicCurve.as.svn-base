///////////////////////////////////////////////////////////
//  CubicCurve.as
//  Macromedia ActionScript Implementation of the Class CubicCurve
//  Generated by Enterprise Architect
//  Created on:      01-Apr-2008 8:09:21 AM
//  Original author: alessandro crugnola
///////////////////////////////////////////////////////////

package com.aviary.geom.ext.curves
{
	import __AS3__.vec.Vector;
	
	import flash.geom.Point;
	
	public final class CubicCurve
	{
		private var _x0: Number;
		private var _y0: Number;
		private var _x1: Number;
		private var _y1: Number;
		private var _x2: Number;
		private var _y2: Number;
		private var _x3: Number;
		private var _y3: Number;
		
		public function CubicCurve( x0: Number, y0: Number, x1: Number, y1: Number, x2: Number, y2: Number, x3: Number, y3: Number )
		{
			_x0 = x0;
			_y0 = y0;
			_x1 = x1;
			_y1 = y1;
			_x2 = x2;
			_y2 = y2;
			_x3 = x3;
			_y3 = y3;
		}
		
		public function update( x0: Number, y0: Number, x1: Number, y1: Number, x2: Number, y2: Number, x3: Number, y3: Number ): void
		{
			_x0 = x0;
			_y0 = y0;
			_x1 = x1;
			_y1 = y1;
			_x2 = x2;
			_y2 = y2;
			_x3 = x3;
			_y3 = y3;
		}
		
		public function get a(): Point
		{
			return new Point( _x0, _y0 );
		}
		
		public function get b(): Point
		{
			return new Point( _x3, _y3 );
		}
		
		public function get x0(): Number
		{
			return _x0;
		}
		
		public function get y0(): Number
		{
			return _y0;
		}
		
		public function get x1(): Number
		{
			return _x1;
		}
		
		public function get y1(): Number
		{
			return _y1;
		}
		
		public function get x2(): Number
		{
			return _x2;
		}
		
		public function get y2(): Number
		{
			return _y2;
		}
		
		public function get x3(): Number
		{
			return _x3;
		}
		
		public function get y3(): Number
		{
			return _y3;
		}
		
		public function getSquareFlatness(): Number
		{
			var pd2: Number;
			var x: Number;
			var y: Number;
			var u: Number;
			var px: Number;
			var py: Number;
			
			const x1: Number = _x0;
			const y1: Number = _y0;
			const x2: Number = _x3;
			const y2: Number = _y3;
			
			px = _x1;
			py = _y1;
			
			pd2 = ( x1 - x2 ) * ( x1 - x2 ) + ( y1 - y2 ) * ( y1 - y2 );
			
			if( pd2 == 0 )
			{
				x = x1;
				y = y2;
			}else
			{
				u = ( ( px - x1 ) * ( x2 - x1 ) + ( py - y1 ) * ( y2 - y1 ) ) / pd2;
				
				if( u < 0 )
				{
					x = x1;
					y = y1;
				}else if( u > 1 )
				{
					x = x2;
					y = y2;
				}else
				{
					x = x1 + u * ( x2 - x1 );
					y = y1 + u * ( y2 - y1 );
				}
			}
			
			const d1: Number = ( x - px ) * ( x - px ) + ( y - py ) * ( y - py );
			
			// --
			
			px = _x2;
			py = _y2;
			
			pd2 = ( x1 - x2 ) * ( x1 - x2 ) + ( y1 - y2 ) * ( y1 - y2 );
			
			if( pd2 == 0 )
			{
				x = x1;
				y = y2;
			}else
			{
				u = ( ( px - x1 ) * ( x2 - x1 ) + ( py - y1 ) * ( y2 - y1 ) ) / pd2;
				
				if( u < 0 )
				{
					x = x1;
					y = y1;
				}else if( u > 1 )
				{
					x = x2;
					y = y2;
				}else
				{
					x = x1 + u * ( x2 - x1 );
					y = y1 + u * ( y2 - y1 );
				}
			}
			
			const d2: Number = ( x - px ) * ( x - px ) + ( y - py ) * ( y - py );
			
			return Math.max( d1, d2 );
		}
		
		public function subdivide(): Vector.<Number>
		{
			var mid_x: Number;
			var mid_y: Number;
		    
		    const left_c1x: Number = ( _x0 + _x1 ) / 2;
		    const left_c1y: Number = ( _y0 + _y1 ) / 2;
		    const right_c2x: Number = ( _x3 + _x2 ) / 2;
		    const right_c2y: Number = ( _y3 + _y2 ) / 2;
		    
		    mid_x = ( _x1 + _x2 ) / 2;
		    mid_y = ( _y1 + _y2 ) / 2;
		    
		    const left_c2x: Number = ( left_c1x + mid_x ) / 2;
		    const left_c2y: Number = ( left_c1y + mid_y ) / 2;
		    const right_c1x: Number = ( mid_x + right_c2x ) / 2;
		    const right_c1y: Number = ( mid_y + right_c2y ) / 2;
		    
		    mid_x = ( left_c2x + right_c1x ) / 2;
		    mid_y = ( left_c2y + right_c1y ) / 2;
			
			return Vector.<Number>( [ _x0, _y0, left_c1x, left_c1y, left_c2x, left_c2y, mid_x, mid_y, mid_x, mid_y, right_c1x, right_c1y, right_c2x, right_c2y, _x3, _y3 ] );
		}

	}
}