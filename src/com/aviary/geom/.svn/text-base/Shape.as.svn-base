///////////////////////////////////////////////////////////
//  Shape.as
//  Macromedia ActionScript Implementation of the Class Shape
//  Generated by Enterprise Architect
//  Created on:      01-Apr-2008 8:09:29 AM
//  Original author: alessandro crugnola
///////////////////////////////////////////////////////////

package com.aviary.geom
{
	import __AS3__.vec.Vector;
	
	import com.aviary.display.IShapeContainer;
	import com.aviary.geom.controls.IHandle;
	import com.aviary.geom.path.IPath;
	import com.aviary.geom.path.Path;
	import com.aviary.sdk.storage.eggfile.EGGNode;
	import com.aviary.sdk.storage.eggfile.IEGGNode;
	import com.aviary.sdk.storage.eggfile.attributes.AttributeTypes;
	import com.aviary.sdk.storage.eggfile.attributes.BooleanAttribute;
	import com.aviary.sdk.storage.eggfile.attributes.LazyAttribute;
	import com.aviary.sdk.storage.eggfile.attributes.StringAttribute;
	
	import flash.display.Graphics;
	import flash.events.EventDispatcher;
	import flash.geom.Rectangle;
	import flash.utils.ByteArray;
	import flash.utils.getQualifiedClassName;
	
	import mx.utils.UIDUtil;

	[Event(name='shapeUpdate', type='com.aviary.events.ShapeEvent')]
	/**
	 * @author alessandro crugnola
	 * @version 1.0
	 * @created 01-Apr-2008 8:09:29 AM
	 */
	public class Shape extends EventDispatcher implements IShape
	{
	    static public var CURVE_CONVERSION: Number = 0.5522847;
	    static public var BEZIER2_CONVERSION: Number = 0.707107;
	    
	    private var _container: IShapeContainer;
	    protected var _boundingBox: Rectangle;
	    protected var _colorRect: Rectangle;
	    protected var _handles: Vector.<IHandle>;
	    protected var _handles_dict: Object;
	    protected var _locked: Boolean;
	    protected var _uid: String;
		protected var _eggNode: IEGGNode;
		
		protected var _commands: Vector.<int>;
		protected var _data: Vector.<Number>;
		
		public function get path_commands( ): Vector.<int>
		{
			return _commands;
		}
		
		public function get path_data( ): Vector.<Number>
		{
			return _data;
		}

	    public function Shape( id: String = null )
	    {
			_uid = id || UIDUtil.createUID( );
			super( this );
			_eggNode = createEggNode( );
			_commands = new Vector.<int>();
			_data = new Vector.<Number>();
			_handles = new Vector.<IHandle>( );			
			_handles_dict = new Object( );
	    }
	    
	    protected function createEggNode( ): IEGGNode
	    {
	    	var node: IEGGNode = new EGGNode( this._uid );
			node.setAttribute( new StringAttribute( "type", this.type ) );
			return node;	    	
	    }
	    
	    public function getHandleByUid( value: String ): IHandle
	    {
	    	return _handles[ _handles_dict[ value ] ];
	    }
	    
	    public function get eggNode( ): IEGGNode
	    {
	    	return _eggNode;
	    }
	    
	    public function set eggNode( value: IEGGNode ): void
	    {
	    	_eggNode = value;
	    }

	    public function get uid(): String
	    {
	    	return _uid;
	    }

	    /**
	     * 
	     * @param value    value
	     */
	    public function set uid(value:String): void
	    {
	    	_uid = value;
	    }

	    /**
	     * 
	     * @param value    value
	     */
	    public function set locked(value:Boolean): void
	    {
	    	_locked = value;
	    	_eggNode.setAttribute( new BooleanAttribute( "locked", value ) );
	    }
	    
	    public function get locked( ): Boolean
	    {
	    	return _locked;
	    }

	    /**
	     * Tells to the current ICanvas tool if this shape allows to select multiple
	     * handles
	     */
	    public function get allowMultipleHandleSelection(): Boolean
	    {
	    	return false;
	    }

	    /**
	     * Get the ShapeObject container
	     */
	    public function get container(): IShapeContainer
	    {
	    	return _container;
	    }

	    /**
	     * 
	     * @param value    value
	     */
	    public function set container(value:IShapeContainer): void
	    {
	    	_container = value;
	    }

	    /**
	     * Invalidate the Shape bounding box
	     */
	    public function invalidate(): void
	    {
	    	_boundingBox = null;
	    }
		
	    /**
	     * Render the current Shape to the screen
	     * 
	     * @param walker    walker
	     */
	    public function render( g: Graphics ): void
	    {
	    	throw new Error( "NonImplementationException" );
	    }

	    /**
	     * Convert the current IShape into a new IPath
	     */
	    public function generatePath(): IPath
	    {
			throw new Error( "NonImplementationException" );
	    }

	    /**
	     * Return this shape handles
	     */
	    public function get handles(): Vector.<IHandle>
	    {
	    	return _handles;
	    }

	    public function get boundingBox(): Rectangle
	    {
	    	return _boundingBox;
	    }

	    /**
	     * Color rectangle to be used with the Linear or Radial fill
	     */
	    public function get colorRect( ): Rectangle
	    {
			if( !_colorRect && boundingBox != null )
			{
				return boundingBox.clone( );
			}
			return _colorRect;
	    }
	    
	    public function set colorRect( value: Rectangle ): void
	    {
	    	_colorRect = value;
	    	_eggNode.setAttribute( new LazyAttribute( "colorRect", AttributeTypes.BINARY_TYPE, encodeColorRect ) );
	    }
	    
	    protected function encodeColorRect( ): ByteArray
	    {
	    	var b: ByteArray = new ByteArray( );
	    	b.writeObject( _colorRect );
	    	return b;
	    }
	    
	    public function decodeColorRect( data: ByteArray ): Rectangle
	    {
	    	data.position = 0;
	    	var c: Object = data.readObject( );
	    	return new Rectangle( c.x, c.y, c.width, c.height );
	    }
	    
	    public function get type( ): String
	    {
	    	return flash.utils.getQualifiedClassName( this );
	    }
	    
		public function decode( node: IEGGNode ): void
		{
			throw new Error("NonImplementationException");
		}
		
		public function encode( ): IEGGNode
		{
			throw new Error("NonImplementationException");
		}
		
		public static function create( name: String ): IShape
		{
			var _shape: IShape;
			switch( name )
			{
				case getQualifiedClassName(Star):
					_shape = new Star( );
					break;
				case getQualifiedClassName(Polygon):
					_shape = new Polygon( );
					break;
				case getQualifiedClassName(Spiral):
					_shape = new Spiral( );
					break;
				case getQualifiedClassName(Ellipse):
					_shape = new Ellipse( );
					break;
				case getQualifiedClassName(RoundedRectangle):
					_shape = new RoundedRectangle( );
					break;
				case getQualifiedClassName(Path):
				case "com.aviary.geom::Path":
					_shape = new Path( );
					break;
			}
			return _shape;
		}


	}//end Shape

}