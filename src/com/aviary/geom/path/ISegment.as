///////////////////////////////////////////////////////////
//  ISegment.as
//  Macromedia ActionScript Implementation of the Interface ISegment
//  Generated by Enterprise Architect
//  Created on:      01-Apr-2008 8:09:24 AM
//  Original author: alessandro crugnola
///////////////////////////////////////////////////////////

package com.aviary.geom.path
{
	import __AS3__.vec.Vector;
	
	import com.aviary.geom.controls.IHandle;
	import com.aviary.raven.utils.ICloneable;
	
	import flash.events.IEventDispatcher;
	import flash.geom.Point;
	import flash.utils.ByteArray;

	/**
	 * project: GeometrySDK Generic Interface to be used when dealing with Paths
	 * @author alessandro crugnola
	 * @version 1.0
	 * @created 01-Apr-2008 8:09:24 AM
	 */
	public interface ISegment extends IEventDispatcher, ICloneable
	{
		
		function get uid( ): String;
		function set uid( value: String ): void;
		
		function get commands( ): Vector.<int>;
		function get data( ): Vector.<Number>;
		
		function get path_index( ): PathIndex;
		
		/**
		 * Get the start point of a Segment. The start point is always the end point of
		 * the previous ISegment
		 */
		function get start(): Point;

		/**
		 * Get the final point
		 */
		function get end(): Point;

		/**
		 * Not used yet
		 */
		function get length(): Number;

		/**
		 * Get the previous ISegment on a path
		 */
		function get prev(): ISegment;

		/**
		 * 
		 * @param value    value
		 */
		function set prev(value:ISegment): void;

		/**
		 * Get the next segment in a IPath
		 * @see IPath
		 */
		function get next(): ISegment;

		/**
		 * 
		 * @param value    value
		 */
		function set next(value:ISegment): void;

		function get isEndSegment( ): Boolean;

		function get handles(): Vector.<IHandle>;

		function get controlHandle(): IHandle;

		/**
		 * Get the position Point at the given r value ( where 0 < r < 1 )
		 * 
		 * @param r    r
		 */
		function getLerp(r:Number): Point;

		/**
		 * Invalidate the current segment
		 */
		function invalidate(): void;
		
		function encode( byte: ByteArray ): void;
		
		function getHandleByUid( value: String ): IHandle;
		
		function getClosestPoint( p: Point ): Point;
		
		/**
		 * Return the segment length between the start point to
		 * the given poin on the segment.
		 * Return value is between 0 to 1
		 * 
		 */
		function getSegmentLength( p: Point ): Number;
		
		function toString( ): String;
		
	}//end ISegment

}