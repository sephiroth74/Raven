///////////////////////////////////////////////////////////
//  LineSegment.as
//  Macromedia ActionScript Implementation of the Class LineSegment
//  Generated by Enterprise Architect
//  Created on:      01-Apr-2008 8:09:26 AM
//  Original author: alessandro crugnola
///////////////////////////////////////////////////////////

package com.aviary.geom.path
{
	import __AS3__.vec.Vector;
	
	import com.aviary.events.HandleEvent;
	import com.aviary.geom.utils.Point2D;
	import com.aviary.raven.utils.ICloneable;
	
	import flash.display.GraphicsPathCommand;
	import flash.geom.Point;
	import flash.utils.ByteArray;

	/**
	 * @author alessandro crugnola
	 * @version 1.0
	 * @created 01-Apr-2008 8:09:26 AM
	 */
	public class LineSegment extends PathSegment implements IStraightSegment
	{
	    /**
	     * Represent a straight line between 2 points into a path
	     * @param x	end x point
	     * @param y end y point
	     */
	    public function LineSegment( x: Number, y: Number )
	    {
			super( x, y );
			_handles_dict[ controlHandle.name ] = 0;
			
			_commands = new Vector.<int>( 1, true );
			_commands[0] = GraphicsPathCommand.LINE_TO;
			
			_data = new Vector.<Number>( 2, true );
			_data[0] = _controlPoint.x;
			_data[1] = _controlPoint.y;
	    }
	    
	    protected override function onHandleChange(event:HandleEvent) : void
	    {
			_data[0] = _controlPoint.x;
			_data[1] = _controlPoint.y;
			super.onHandleChange( event );
	    }

	    /**
	     * Return a point between the start and end point of the current segment
	     * @param t    Floating point number between 0.0 and 1.0
	     */
	    public override function getLerp( t: Number ): Point
	    {
			return Point2D.getLerp( start, end, t );
	    }
	    
	    public override function encode( byte: ByteArray ): void
	    {
	    	var obj: Object = {
	    				x: controlHandle.point.x, 
	    				y: controlHandle.point.y, 
	    				prev: prev ? prev.uid : "",
	    				next: next ? next.uid : "",
	    				uid: uid
	    				};
	    	byte.writeObject( obj );
	    }

		override public function getClosestPoint( p: Point ): Point
		{
			var AP: Point = new Point( p.x - start.x, p.y - start.y );
			var AB: Point = new Point( end.x - start.x, end.y - start.y );
    		
    		var ab2: Number   = AB.x*AB.x + AB.y*AB.y;
    		var ap_ab: Number = AP.x*AB.x + AP.y*AB.y;
    		var t: Number = ap_ab / ab2;
    		
    		var m: Point = Point2D.multiply( AB, t );
    		
    		var closest: Point = new Point( start.x + m.x, start.y + m.y );
    		return closest;
		}
		
		override public function getSegmentLength( p: Point ): Number
		{
			var t: Number = Point.distance( start, p );
			return ( t / length );
		}
		
		override public function clone(): ICloneable
		{
			return new LineSegment( this.end.x, this.end.y );
		}
		
		override public function toString(): String
		{
			return "line(" + end.x + "," + end.y + ")";
		}

	}//end LineSegment

}