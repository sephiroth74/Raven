///////////////////////////////////////////////////////////
//  Polygon2D.as
//  Macromedia ActionScript Implementation of the Class Polygon2D
//  Generated by Enterprise Architect
//  Created on:      01-Apr-2008 8:09:27 AM
//  Original author: alessandro crugnola
///////////////////////////////////////////////////////////

package com.aviary.geom.utils
{
    import __AS3__.vec.Vector;
    
    import flash.geom.Point;
    
    public class Polygon2D
    {
        private var vertexes: Vector.<Number>;
        
        public function Polygon2D()
        {
            vertexes = new Vector.<Number>( );
        }
        
        public function get vertexCount():uint
        {
            return vertexes.length / 2;
        }
        
        public function xn(i:uint):Number
        {
            return vertexes[i * 2];
        }
        
        public function yn(i:uint):Number
        {
            return vertexes[i * 2 + 1];
        }
        
        public function vertex(i:uint):Point
        {
            return new Point(vertexes[i * 2], vertexes[i * 2 + 1]);
        }
        
        public function add(x:Number, y:Number):void
        {
            vertexes.push(x);
            vertexes.push(y);
        }
        
        public function addVertex(v:Point):void
        {
            vertexes.push(v.x);
            vertexes.push(v.y);
        }
        
        public function simplify(tolerance:Number=.5):void
        {
            vertexes = simplified(tolerance).vertexes;
        }
        
        public function simplified(tolerance:Number=0.5):Polygon2D
        {
            var length:uint = vertexCount;
            var result:Polygon2D = new Polygon2D();
            
            tolerance = Math.max(tolerance, .5);
            
            switch(length)
            {
                case 0:
                break;
                
                case 1:
                    result.addVertex(vertex(0))
                break;
                
                case 2:
                    result.addVertex(vertex(0))
                    result.addVertex(vertex(1))
                break;
                
                default:
                    var acceptPoint:Function = function():void
                    {
                        lastAcceptedPoint = previousPoint;
                        result.addVertex(lastAcceptedPoint);
                        insiders = new Vector.<Vector2D>();
                    }
        
                    var previousPoint:Point = vertex(0);
                    var lastAcceptedPoint:Point;
                    var insiders: Vector.<Vector2D>;
                    
                    acceptPoint();

                    var currentPoint:Point = vertex(1);
        
                    var currentVector:Vector2D = Vector2D.fromPoints(previousPoint, currentPoint);
                    var previousVector:Vector2D;
        
                    for(var i:uint = 2; i < length; ++i)
                    {
                        previousPoint  = currentPoint;
                        currentPoint   = vertex(i);
                        previousVector = currentVector;
                        currentVector  = Vector2D.fromPoints(previousPoint, currentPoint);
                        
                        if ( previousVector.dot(currentVector) <= 0 )
                        {
                            acceptPoint();
                        } else
                        {
                            var candidate:Vector2D = Vector2D.fromPoints(lastAcceptedPoint, currentPoint);
                            insiders.push(Vector2D.fromPoints(lastAcceptedPoint, previousPoint));
        
                            for(var j:uint = 0; j < insiders.length; ++j )
                            {
                                var perp:Vector2D = insiders[j].perpendicular(candidate);
                                if (perp.length > tolerance)
                                {
                                    acceptPoint();
                                    break;
                                }
                            }
                        }
                    }
                    
                    result.addVertex(vertex(length - 1));
                    
                break;
            }
            
            return result;
        }
    }
}