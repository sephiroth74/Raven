///////////////////////////////////////////////////////////
//  Vector2D.as
//  Macromedia ActionScript Implementation of the Class Vector2D
//  Generated by Enterprise Architect
//  Created on:      01-Apr-2008 8:09:31 AM
//  Original author: alessandro crugnola
///////////////////////////////////////////////////////////

package com.aviary.geom.utils
{
    import flash.geom.Point;
 
    public class Vector2D
    {
        public var x:Number;
        public var y:Number;
        
        public function Vector2D(x:Number=1, y:Number=1)
        {
            this.x = x;
            this.y = y;
        }

        public function get length():Number
        {
            return Math.sqrt(x * x + y * y);
        }

        public function get unit():Vector2D
        {
            return divide(length);
        }

        public function dot(other:Vector2D):Number
        {
            return x * other.x + y * other.y;
        }

        public function cross(other:Vector2D):Number
        {
            return x * other.x - y * other.y;
        }
        
        public function add(other:Vector2D):Vector2D
        {
            return new Vector2D(x + other.x, y + other.y);
        }
        
        public function subtract(other:Vector2D):Vector2D
        {
            return new Vector2D(x - other.x, y - other.y);
        }
        
        public function multiply(t:Number):Vector2D
        {
            return new Vector2D(x * t, y * t);
        }
        
        public function divide(t:Number):Vector2D
        {
            return new Vector2D(x / t, y / t);
        }
        
        public function perp():Vector2D
        {
            return new Vector2D(-y, x);
        }
        
        public function perpendicular(other:Vector2D):Vector2D
        {
            return subtract(project(other));
        }
        
        public function project(other:Vector2D):Vector2D
        {
            return other.multiply(dot(other) / other.dot(other));
        }
        
        // inplace
        public function iunit():Vector2D
        {
            return idivide(length);
        }
        
        public function iadd(other:Vector2D):Vector2D
        {
            x += other.x;
            y += other.y;
            
            return this;
        }
        
        public function isubtract(other:Vector2D):Vector2D
        {
            x -= other.x;
            y -= other.y;
            
            return this;
        }
        
        public function imultiply(t:Number):Vector2D
        {
            x *= t;
            y *= t;
            
            return this;
        }
        
        public function idivide(t:Number):Vector2D
        {
            x /= t;
            y /= t;
            
            return this;
        }
        
        
        public static function fromPoints(p1:Point, p2:Point):Vector2D
        {
            return new Vector2D(p2.x - p1.x, p2.y - p1.y);
        }
    }
}
